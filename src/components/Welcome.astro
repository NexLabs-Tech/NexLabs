---
// NexLabs.astro - Disruptive Tech Solutions Landing Page
---

<div id="canvas-container"></div>

<div class="container">
	<nav>
		<div class="logo">NexLabs</div>
		<ul class="nav-links">
			<li><a href="#home">Home</a></li>
			<li><a href="#services">Solutions</a></li>
			<li><a href="#contact">Contact</a></li>
		</ul>
	</nav>

	<section class="hero">
		<div class="floating-shapes">
			<div class="shape">‚óÜ</div>
			<div class="shape">‚óè</div>
			<div class="shape">‚ñ≤</div>
		</div>
		<h1>The Future is Now</h1>
		<p>Revolutionary tech solutions that transform possibilities into reality. Experience the next generation of innovation.</p>
		<a href="#services" class="cta-button">Explore Solutions</a>
	</section>

	<section class="services" id="services">
		<h2>Next-Gen Solutions</h2>
		<div class="services-grid">
			<div class="service-card">
				<div class="service-icon">üåê</div>
				<h3>WebPages</h3>
				<p>Stunning, responsive websites that captivate your audience with cutting-edge design and seamless user experiences across all devices.</p>
			</div>
			<div class="service-card">
				<div class="service-icon">ü§ñ</div>
				<h3>AI Machine Learning Bot Automation</h3>
				<p>Intelligent chatbots and automation systems powered by advanced AI to streamline operations and enhance customer interactions.</p>
			</div>	
			<div class="service-card">
				<div class="service-icon">üõçÔ∏è</div>
				<h3>Store Developments</h3>
				<p>Complete e-commerce solutions with advanced features, payment integration, and inventory management for your online business.</p>
			</div>
			<div class="service-card">
				<div class="service-icon">‚öôÔ∏è</div>
				<h3>Custom Software</h3>
				<p>Bespoke software solutions tailored to your specific business needs, built with modern technologies and scalable architecture.</p>
			</div>
			<div class="service-card">
				<div class="service-icon">üì±</div>
				<h3>Mobile Apps</h3>
				<p>Native and cross-platform mobile applications that deliver exceptional performance and user engagement on iOS and Android.</p>
			</div>
			<div class="service-card">
				<div class="service-icon">üöÄ</div>
				<h3>Computer Vision</h3>
				<p>Advanced image and video analysis solutions that leverage deep learning for object detection, recognition, and tracking.</p>
			</div>
		</div>
	</section>

	<section class="stats">
		<div class="stats-grid">
			<div class="stat-item">
				<div class="stat-number">500+</div>
				<div class="stat-label">Projects Delivered</div>
			</div>
			<div class="stat-item">
				<div class="stat-number">50M+</div>
				<div class="stat-label">Data Points Processed</div>
			</div>
			<div class="stat-item">
				<div class="stat-number">99.9%</div>
				<div class="stat-label">Uptime Guarantee</div>
			</div>
			<div class="stat-item">
				<div class="stat-number">24/7</div>
				<div class="stat-label">Support Available</div>
			</div>
		</div>
	</section>

	<section class="contact" id="contact">
		<h2>Get In Touch</h2>
		<p class="contact-subtitle">Ready to transform your vision into reality? Let's build something extraordinary together.</p>
		
		<form class="contact-form" id="contactForm">
			<div class="form-group">
				<input type="email" id="email" name="email" placeholder="Email Address" required>
				<label for="email">Email</label>
			</div>
			
			<div class="form-group">
				<input type="text" id="name" name="name" placeholder="Company or Person Name" required>
				<label for="name">Company/Name</label>
			</div>
			
			<div class="form-group">
				<textarea id="message" name="message" placeholder="Tell us about your project..." required></textarea>
				<label for="message">Message</label>
			</div>
			
			<button type="submit" class="send-button">
				<span class="button-text">Send Message</span>
				<span class="button-icon">üöÄ</span>
				<div class="button-particles"></div>
			</button>
		</form>
	</section>
</div>

<footer>
	<div class="container">
		<div class="footer-content">
			<p>&copy; 2025 NexLabs. Shaping Tomorrow's Technology Today.</p>
		</div>
	</div>
</footer>

<style>
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	body {
		font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
		background: #0a0a0a;
		color: #ffffff;
		overflow-x: hidden;
		line-height: 1.6;
	}

	#canvas-container {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
		position: relative;
		z-index: 1;
	}

	nav {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 20px 0;
		backdrop-filter: blur(20px);
		background: rgba(255, 255, 255, 0.05);
		border-radius: 15px;
		margin: 20px 0;
		padding: 15px 30px;
		border: 1px solid rgba(255, 255, 255, 0.1);
	}

	.logo {
		font-size: 28px;
		font-weight: 800;
		background: linear-gradient(135deg, #00f5ff, #ff0080, #ffaa00);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		letter-spacing: -1px;
	}

	.nav-links {
		display: flex;
		gap: 30px;
		list-style: none;
	}

	.nav-links a {
		color: rgba(255, 255, 255, 0.8);
		text-decoration: none;
		font-weight: 500;
		transition: all 0.3s ease;
		position: relative;
	}

	.nav-links a:hover {
		color: #00f5ff;
		transform: translateY(-2px);
	}

	.hero {
		text-align: center;
		padding: 100px 0 150px;
		position: relative;
	}

	.hero h1 {
		font-size: clamp(3rem, 8vw, 7rem);
		font-weight: 900;
		margin-bottom: 30px;
		background: linear-gradient(135deg, #ffffff, #00f5ff, #ffffff);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		line-height: 1.1;
		letter-spacing: -3px;
		animation: glow 3s ease-in-out infinite alternate;
	}

	@keyframes glow {
		from { filter: drop-shadow(0 0 20px rgba(0, 245, 255, 0.3)); }
		to { filter: drop-shadow(0 0 40px rgba(0, 245, 255, 0.6)); }
	}

	.hero p {
		font-size: 1.5rem;
		color: rgba(255, 255, 255, 0.7);
		margin-bottom: 50px;
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
		font-weight: 300;
	}

	.cta-button {
		display: inline-block;
		padding: 18px 40px;
		background: linear-gradient(135deg, #ff0080, #00f5ff, #ffaa00);
		border: none;
		border-radius: 50px;
		color: white;
		font-size: 1.1rem;
		font-weight: 700;
		text-decoration: none;
		transition: all 0.4s ease;
		position: relative;
		overflow: hidden;
		backdrop-filter: blur(10px);
	}

	.cta-button:hover {
		transform: translateY(-5px) scale(1.05);
		box-shadow: 0 20px 40px rgba(255, 0, 128, 0.3);
	}

	.cta-button::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
		transition: left 0.6s;
	}

	.cta-button:hover::before {
		left: 100%;
	}

	.services {
		padding: 100px 0;
		position: relative;
	}

	.services h2 {
		text-align: center;
		font-size: 3.5rem;
		font-weight: 800;
		margin-bottom: 80px;
		background: linear-gradient(135deg, #ffffff, #00f5ff);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	}

	.services-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
		gap: 40px;
	}

	.service-card {
		backdrop-filter: blur(20px);
		background: rgba(255, 255, 255, 0.05);
		border-radius: 20px;
		padding: 40px;
		border: 1px solid rgba(255, 255, 255, 0.1);
		transition: all 0.4s ease;
		position: relative;
		overflow: hidden;
	}

	.service-card::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		height: 2px;
		background: linear-gradient(90deg, #ff0080, #00f5ff, #ffaa00);
		transform: scaleX(0);
		transition: transform 0.4s ease;
	}

	.service-card:hover::before {
		transform: scaleX(1);
	}

	.service-card:hover {
		transform: translateY(-10px);
		background: rgba(255, 255, 255, 0.08);
		box-shadow: 0 20px 40px rgba(0, 245, 255, 0.1);
	}

	.service-icon {
		width: 60px;
		height: 60px;
		background: linear-gradient(135deg, #ff0080, #00f5ff);
		border-radius: 15px;
		margin-bottom: 20px;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 24px;
	}

	.service-card h3 {
		font-size: 1.5rem;
		font-weight: 700;
		margin-bottom: 15px;
		color: #ffffff;
	}

	.service-card p {
		color: rgba(255, 255, 255, 0.7);
		line-height: 1.6;
	}

	.stats {
		padding: 100px 0;
		text-align: center;
	}

	.stats-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 40px;
	}

	.stat-item {
		backdrop-filter: blur(20px);
		background: rgba(255, 255, 255, 0.03);
		border-radius: 20px;
		padding: 40px 20px;
		border: 1px solid rgba(255, 255, 255, 0.05);
		transition: all 0.3s ease;
	}

	.stat-item:hover {
		transform: translateY(-5px);
		background: rgba(255, 255, 255, 0.05);
	}

	.stat-number {
		font-size: 3rem;
		font-weight: 900;
		background: linear-gradient(135deg, #00f5ff, #ff0080);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		margin-bottom: 10px;
	}

	.stat-label {
		color: rgba(255, 255, 255, 0.8);
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 1px;
		font-size: 0.9rem;
	}

	.contact {
		padding: 100px 0;
		text-align: center;
		position: relative;
	}

	.contact h2 {
		font-size: 3.5rem;
		font-weight: 800;
		margin-bottom: 20px;
		background: linear-gradient(135deg, #ffffff, #00f5ff);
		background-clip: text;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
	}

	.contact-subtitle {
		font-size: 1.2rem;
		color: rgba(255, 255, 255, 0.7);
		margin-bottom: 60px;
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.contact-form {
		max-width: 600px;
		margin: 0 auto;
		display: flex;
		flex-direction: column;
		gap: 30px;
	}

	.form-group {
		position: relative;
	}

	.form-group input,
	.form-group textarea {
		width: 100%;
		padding: 20px;
		background: rgba(255, 255, 255, 0.05);
		border: 1px solid rgba(255, 255, 255, 0.1);
		border-radius: 15px;
		color: white;
		font-size: 1rem;
		backdrop-filter: blur(20px);
		transition: all 0.3s ease;
		resize: none;
	}

	.form-group textarea {
		min-height: 120px;
	}

	.form-group input:focus,
	.form-group textarea:focus {
		outline: none;
		border-color: #00f5ff;
		box-shadow: 0 0 20px rgba(0, 245, 255, 0.2);
		background: rgba(255, 255, 255, 0.08);
	}

	.form-group input::placeholder,
	.form-group textarea::placeholder {
		color: rgba(255, 255, 255, 0.5);
	}

	.form-group label {
		position: absolute;
		top: -10px;
		left: 15px;
		background: #0a0a0a;
		padding: 0 10px;
		font-size: 0.9rem;
		color: #00f5ff;
		font-weight: 600;
	}

	.send-button {
		position: relative;
		padding: 20px 50px;
		background: linear-gradient(135deg, #ff0080, #00f5ff, #ffaa00);
		border: none;
		border-radius: 50px;
		color: white;
		font-size: 1.1rem;
		font-weight: 700;
		cursor: pointer;
		transition: all 0.4s ease;
		overflow: hidden;
		backdrop-filter: blur(10px);
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 10px;
		align-self: center;
	}

	.send-button:hover {
		transform: translateY(-5px) scale(1.05);
		box-shadow: 0 20px 40px rgba(255, 0, 128, 0.4);
	}

	.send-button:active {
		transform: translateY(-2px) scale(1.02);
	}

	.button-text {
		z-index: 2;
		position: relative;
	}

	.button-icon {
		z-index: 2;
		position: relative;
		transition: transform 0.3s ease;
	}

	.send-button:hover .button-icon {
		transform: translateX(5px) scale(1.2);
	}

	.button-particles {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		overflow: hidden;
		border-radius: 50px;
	}

	.send-button::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
		transition: left 0.6s;
		z-index: 1;
	}

	.send-button:hover::before {
		left: 100%;
	}

	.floating-shapes {
		position: absolute;
		width: 100%;
		height: 100%;
		pointer-events: none;
	}

	.shape {
		position: absolute;
		opacity: 0.1;
		animation: float 6s ease-in-out infinite;
		font-size: 2rem;
	}

	.shape:nth-child(1) { top: 20%; left: 10%; animation-delay: 0s; }
	.shape:nth-child(2) { top: 60%; right: 10%; animation-delay: 2s; }
	.shape:nth-child(3) { bottom: 20%; left: 20%; animation-delay: 4s; }

	@keyframes float {
		0%, 100% { transform: translateY(0px) rotate(0deg); }
		50% { transform: translateY(-20px) rotate(10deg); }
	}

	footer {
		text-align: center;
		padding: 60px 0;
		border-top: 1px solid rgba(255, 255, 255, 0.1);
		margin-top: 100px;
	}

	.footer-content {
		color: rgba(255, 255, 255, 0.6);
	}

	@media (max-width: 768px) {
		.nav-links {
			display: none;
		}
		
		.hero {
			padding: 60px 0 100px;
		}
		
		.services, .stats, .contact {
			padding: 60px 0;
		}

		.services-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script>
	// Wait for Three.js to load
	function initializeScene() {
		if (typeof THREE === 'undefined') {
			setTimeout(initializeScene, 100);
			return;
		}

		// Three.js Scene Setup
		let scene, camera, renderer, particles;
		let mouseX = 0, mouseY = 0;
		
		function init() {
			const container = document.getElementById('canvas-container');
			
			if (!container) return;
			
			scene = new THREE.Scene();
			camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
			renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
			
			renderer.setSize(window.innerWidth, window.innerHeight);
			renderer.setClearColor(0x000000, 0);
			container.appendChild(renderer.domElement);
			
			// Create particle system
			createParticles();
			
			// Create floating geometric shapes
			createFloatingShapes();
			
			camera.position.z = 50;
			
			// Mouse interaction
			document.addEventListener('mousemove', onMouseMove);
			window.addEventListener('resize', onWindowResize);
			
			animate();
		}
		
		function createParticles() {
			const geometry = new THREE.BufferGeometry();
			const vertices = [];
			
			for (let i = 0; i < 2000; i++) {
				vertices.push(
					Math.random() * 200 - 100,
					Math.random() * 200 - 100,
					Math.random() * 200 - 100
				);
			}
			
			geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
			
			const material = new THREE.PointsMaterial({
				color: 0x00f5ff,
				size: 0.5,
				transparent: true,
				opacity: 0.6,
				blending: THREE.AdditiveBlending
			});
			
			particles = new THREE.Points(geometry, material);
			scene.add(particles);
		}
		
		function createFloatingShapes() {
			// Create various geometric shapes
			const geometries = [
				new THREE.TetrahedronGeometry(2),
				new THREE.OctahedronGeometry(1.5),
				new THREE.IcosahedronGeometry(1.8),
				new THREE.DodecahedronGeometry(1.2)
			];
			
			const materials = [
				new THREE.MeshBasicMaterial({ 
					color: 0xff0080, 
					wireframe: true, 
					transparent: true, 
					opacity: 0.3 
				}),
				new THREE.MeshBasicMaterial({ 
					color: 0x00f5ff, 
					wireframe: true, 
					transparent: true, 
					opacity: 0.3 
				}),
				new THREE.MeshBasicMaterial({ 
					color: 0xffaa00, 
					wireframe: true, 
					transparent: true, 
					opacity: 0.3 
				})
			];
			
			for (let i = 0; i < 15; i++) {
				const geometry = geometries[Math.floor(Math.random() * geometries.length)];
				const material = materials[Math.floor(Math.random() * materials.length)];
				const mesh = new THREE.Mesh(geometry, material);
				
				mesh.position.set(
					Math.random() * 100 - 50,
					Math.random() * 100 - 50,
					Math.random() * 50 - 25
				);
				
				mesh.rotation.set(
					Math.random() * Math.PI,
					Math.random() * Math.PI,
					Math.random() * Math.PI
				);
				
				mesh.userData = {
					rotationSpeed: {
						x: (Math.random() - 0.5) * 0.02,
						y: (Math.random() - 0.5) * 0.02,
						z: (Math.random() - 0.5) * 0.02
					}
				};
				
				scene.add(mesh);
			}
		}
		
		function onMouseMove(event) {
			mouseX = (event.clientX - window.innerWidth / 2) * 0.0005;
			mouseY = (event.clientY - window.innerHeight / 2) * 0.0005;
		}
		
		function onWindowResize() {
			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();
			renderer.setSize(window.innerWidth, window.innerHeight);
		}
		
		function animate() {
			requestAnimationFrame(animate);
			
			// Rotate particles
			if (particles) {
				particles.rotation.x += 0.0005;
				particles.rotation.y += 0.001;
			}
			
			// Mouse interaction with camera
			camera.position.x += (mouseX * 10 - camera.position.x) * 0.05;
			camera.position.y += (-mouseY * 10 - camera.position.y) * 0.05;
			camera.lookAt(scene.position);
			
			// Animate geometric shapes
			scene.traverse((object) => {
				if (object.userData && object.userData.rotationSpeed) {
					object.rotation.x += object.userData.rotationSpeed.x;
					object.rotation.y += object.userData.rotationSpeed.y;
					object.rotation.z += object.userData.rotationSpeed.z;
				}
			});
			
			renderer.render(scene, camera);
		}
		
		// Initialize the scene
		init();
	}

	// Start initialization
	initializeScene();
	
	// Smooth scrolling for navigation
	document.querySelectorAll('a[href^="#"]').forEach(anchor => {
		anchor.addEventListener('click', function (e) {
			e.preventDefault();
			const target = document.querySelector(this.getAttribute('href'));
			if (target) {
				target.scrollIntoView({
					behavior: 'smooth',
					block: 'start'
				});
			}
		});
	});
	
	// Contact form submission with cool effect
	document.getElementById('contactForm').addEventListener('submit', function(e) {
		e.preventDefault();
		
		const button = document.querySelector('.send-button');
		const buttonText = document.querySelector('.button-text');
		const buttonIcon = document.querySelector('.button-icon');
		
		// Cool sending effect
		button.style.background = 'linear-gradient(135deg, #00f5ff, #ff0080)';
		buttonText.textContent = 'Sending...';
		buttonIcon.textContent = '‚ö°';
		
		// Create particle explosion effect
		createParticleExplosion(button);
		
		// Simulate sending (replace with actual form submission)
		setTimeout(() => {
			buttonText.textContent = 'Sent!';
			buttonIcon.textContent = '‚ú®';
			button.style.background = 'linear-gradient(135deg, #00ff88, #00f5ff)';
			
			setTimeout(() => {
				buttonText.textContent = 'Send Message';
				buttonIcon.textContent = 'üöÄ';
				button.style.background = 'linear-gradient(135deg, #ff0080, #00f5ff, #ffaa00)';
				this.reset();
			}, 2000);
		}, 1500);
	});
	
	function createParticleExplosion(element) {
		const rect = element.getBoundingClientRect();
		const centerX = rect.left + rect.width / 2;
		const centerY = rect.top + rect.height / 2;
		
		for (let i = 0; i < 20; i++) {
			const particle = document.createElement('div');
			particle.style.position = 'fixed';
			particle.style.left = centerX + 'px';
			particle.style.top = centerY + 'px';
			particle.style.width = '4px';
			particle.style.height = '4px';
			particle.style.background = `hsl(${Math.random() * 360}, 100%, 70%)`;
			particle.style.borderRadius = '50%';
			particle.style.pointerEvents = 'none';
			particle.style.zIndex = '9999';
			particle.style.transition = 'all 1s ease-out';
			
			document.body.appendChild(particle);
			
			setTimeout(() => {
				const angle = (Math.PI * 2 * i) / 20;
				const distance = 100 + Math.random() * 100;
				particle.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
				particle.style.opacity = '0';
			}, 10);
			
			setTimeout(() => {
				document.body.removeChild(particle);
			}, 1000);
		}
	}
	
	// Add scroll animations
	const observerOptions = {
		threshold: 0.1,
		rootMargin: '0px 0px -50px 0px'
	};
	
	const observer = new IntersectionObserver((entries) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				entry.target.style.opacity = '1';
				entry.target.style.transform = 'translateY(0)';
			}
		});
	}, observerOptions);
	
	// Observe service cards for scroll animations
	document.addEventListener('DOMContentLoaded', () => {
		document.querySelectorAll('.service-card, .stat-item, .contact-form').forEach(el => {
			el.style.opacity = '0';
			el.style.transform = 'translateY(20px)';
			el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
			observer.observe(el);
		});
	});
</script>